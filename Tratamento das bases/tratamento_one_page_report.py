# -*- coding: utf-8 -*-
"""Tratamento One Page Report.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Idz9mInvC2IrpDplhHuzcYsRTVXSGhYn

# Tratamentos necessários para a criação do One Page Report

* Esse arquivo possui todos os passos realizados para tratar as bases de cadastro e sinistro
* As bases ajustadas/tratadas serão utilizadas para a criação do dashboard one page no Power BI
* O Google Colab desse arquivo pode ser acessado pelo link: https://colab.research.google.com/drive/1Idz9mInvC2IrpDplhHuzcYsRTVXSGhYn?usp=sharing

# 1 - Configuração do ambiente e obtenção dos dados no Google Drive
"""

import pandas as pd
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

bd_cadastro = pd.read_excel("/content/drive/MyDrive/Banco de dados/Cadastro_base.xlsx", dtype=str)
bd_sinistro = pd.read_excel("/content/drive/MyDrive/Banco de dados/Sinistros_base.xlsx", dtype=str)
dic_cetipo = pd.read_csv("/content/drive/MyDrive/Banco de dados/compilados cetipos HBIT.csv", sep=";", dtype=str)

# Limpar os nomes das colunas para evitar erros invisíveis
bd_cadastro.columns = bd_cadastro.columns.str.strip()
bd_sinistro.columns = bd_sinistro.columns.str.strip()
dic_cetipo.columns = dic_cetipo.columns.str.strip()

# Limpar espaços a mais nas colunas
for col in bd_cadastro.select_dtypes(include='object').columns:
    bd_cadastro[col] = bd_cadastro[col].astype(str).str.strip().str.replace(r'\s+', ' ', regex=True)

for col in bd_sinistro.select_dtypes(include='object').columns:
    bd_sinistro[col] = bd_sinistro[col].astype(str).str.strip().str.replace(r'\s+', ' ', regex=True)

"""#2 - Ajustes na base de cadastro

1. Verificação das informações iniciais da base
*   16.736 linhas
*   10 colunas do tipo string
*   Nenhum dado NULL





"""

print('Verificando tipos de dados:\n')
bd_cadastro.info()

print('\nVisualização das primeiras linhas:\n')
bd_cadastro.head(10)

"""2. Unificando as colunas de datas
*   Passo realizado para manter 1 padrão de datas





"""

# Criando a coluna 'REFERENCIA' no formato mm/aaaa
bd_cadastro['REFERENCIA'] = bd_cadastro['MÊS DE REFERÊNCIA'] + '/' + bd_cadastro['ANO DE REFERÊNCIA'].astype(str)

# Removendo as colunas 'MÊS DE REFERÊNCIA' e 'ANO DE REFERÊNCIA'
bd_cadastro = bd_cadastro.drop(['MÊS DE REFERÊNCIA', 'ANO DE REFERÊNCIA'], axis=1)

# Movendo a coluna 'REFERENCIA' para a primeira posição
cols = list(bd_cadastro.columns)
cols.insert(0, cols.pop(cols.index('REFERENCIA')))
bd_cadastro = bd_cadastro.loc[:, cols]

bd_cadastro.head(10)

"""3. Atualização tipos de dados e remoneação de colunas

"""

#Transformando coluna 'IDADE' para int
bd_cadastro['IDADE'] = bd_cadastro['IDADE'].astype(int)

#Transformando a coluna 'REFERENCIA' para datatime
bd_cadastro['REFERENCIA'] = pd.to_datetime(bd_cadastro['REFERENCIA'], errors='coerce')

#Renomeando colunas para remoção de acentos e espaços
bd_cadastro = bd_cadastro.rename(columns={
    'CODIGO DA FAMILIA': 'CODIGO_FAMILIA',
    'CODIGO ÚNICO DA PESSOA': 'CODIGO_PESSOA',
    'DATA DE NASCIMENTO': 'DATA_NASCIMENTO',
    'FAIXA ETÁRIA': 'FAIXA_ETARIA'
})

print('Verificando tipos de dados:\n')
bd_cadastro.info()

print('\nVisualização das primeiras linhas:\n')
bd_cadastro.head(10)

"""# 3 - Ajustes na base de sinistros

1. Verificação das informações iniciais da base
*   48.965 linhas
*   **12** colunas do tipo string
*   Nenhum dado NULL

"""

print('Verificando tipos de dados:\n')
bd_sinistro.info()

print('\nVisualização das primeiras linhas:\n')
bd_sinistro.head(10)

"""2. Atualização tipos de dados e remoneação de colunas"""

#Transformando as colunas 'REFERENCIA' e 'DATA DO EVENTO' para datatime
bd_sinistro['DATA DE REFERENCIA'] = pd.to_datetime(bd_sinistro['DATA DE REFERENCIA'], dayfirst=True, errors='coerce')
bd_sinistro['DATA DO EVENTO'] = pd.to_datetime(bd_sinistro['DATA DO EVENTO'], dayfirst=True, errors='coerce')

#Substituir . para , na coluna de 'VALOR DO EVENTO'
# Garante que a coluna seja float
bd_sinistro['VALOR DO EVENTO'] = pd.to_numeric(bd_sinistro['VALOR DO EVENTO'], errors='coerce')

# Aplica a formatação (float → string com vírgula)
bd_sinistro['VALOR DO EVENTO'] = bd_sinistro['VALOR DO EVENTO'].apply(
    lambda x: f'{x:.2f}'.replace('.', ',') if pd.notnull(x) else ''
)

#Renomeando colunas para remoção de acentos e espaços
bd_sinistro = bd_sinistro.rename(columns={
    'DATA DE REFERENCIA': 'REFERENCIA',
    'CODIGO DO EVENTO': 'CODIGO_EVENTO',
    'CODIGO DA FAMILIA': 'CODIGO_FAMILIA',
    'CODIGO ÚNICO DA PESSOA': 'CODIGO_PESSOA',
    'DATA DO EVENTO': 'DATA_EVENTO',
    'VALOR DO EVENTO': 'VALOR_EVENTO',
    'DESCRITOR DO EVENTO': 'DESCRITOR_EVENTO',
    'INTERNACAO?': 'INTERNACAO'
})

print('Verificando tipos de dados:\n')
bd_sinistro.info()

print('\nVisualização das primeiras linhas:\n')
bd_sinistro.head(10)

"""# 4 - Classificação Cetipos - Hbit

* **Passo necessário para possibilitar análises por tipo de evento. Ele tem o proposito de realizar a classificação dos eventos da base de sinistro com cruzamento com o arquivo classificação Hbit.csv**
<br>

* Esse arquivo foi criado no Excel a partir dos dados compilados de códigos de eventos e suas classificação Hbit.
* O compilado foi montado a partir dos dicionários de cetipos das operadoras Seguros Unimed, CNU, Intermédica, Unimed Vitória e Unimed Santos (Essas operadoras foram escolhidos porque possuiam códigos de eventos no padrão TUSS, igual a base de sinistro).
<br>

* 109 eventos não puderam ser classficiados com o compilado. Por ser uma quantidade pequena, decidi realizar a classificação manual e atualizei o compilado com essas informações.
"""

# Renomeia a coluna do dic_cetipo para coincidir com o nome da coluna no sinistro
dic_cetipo.rename(columns={'PROCEDIMENTO': 'CODIGO_EVENTO'}, inplace=True)

dic_cetipo.head(10)

# Merge com dic_cetipo (sem filtrar ainda)
bd_sinistro = bd_sinistro.merge(
    dic_cetipo[['CODIGO_EVENTO', 'CETIPO NOVO']],
    on='CODIGO_EVENTO',
    how='left'
)

# Cria uma nova coluna 'CLASSIFICACAO_HBIT' e realiza a classificação dos eventos que não são classificados como 'INTERNACAO'
bd_sinistro['CLASSIFICACAO_HBIT'] = np.where(
    bd_sinistro['INTERNACAO'].str.upper().str.strip() == 'SIM',
    'INTERNACAO',
    bd_sinistro['CETIPO NOVO']
)

#Remove a coluna auxiliar do merge
bd_sinistro.drop(columns=['CETIPO NOVO'], inplace=True)

bd_sinistro.info()
bd_sinistro.head(10)

# Filtrar apenas os eventos sem classificação
nao_classificados = bd_sinistro[bd_sinistro['CLASSIFICACAO_HBIT'].isnull()]

nao_classificados_unicos = nao_classificados[['CODIGO_EVENTO', 'DESCRITOR_EVENTO']].drop_duplicates()

print(f'Total de CÓDIGOS DE EVENTO únicos sem classificação: {len(nao_classificados_unicos)}')

'''
  #Na primeira execução, 109 eventos ainda ficaram sem classificação (Mes utilizando o compilado de classificados do drive)
  #Separei esses eventos para fazer a classificação manual

  # Define o caminho completo para salvar o arquivo
  caminho_nao_classificados_unicos = '/content/drive/MyDrive/Banco de dados/Cetipos Classificados Manualmente/Cetipos_Para_Classificar_Manualmente.csv'

  # Salva o DataFrame como CSV (ex: separador ; e encoding compatível com Excel)
  nao_classificados_unicos.to_csv(caminho_nao_classificados_unicos, sep=';', index=False, encoding='utf-8')

  print(f'Arquivo salvo no drive')
'''

#Padroniza a escrita de Internação e redução das consultas em PS
bd_sinistro['CLASSIFICACAO_HBIT'] = bd_sinistro['CLASSIFICACAO_HBIT'].replace('INTERNACAO', 'internação')
bd_sinistro['CLASSIFICACAO_HBIT'] = bd_sinistro['CLASSIFICACAO_HBIT'].replace('internacao', 'internação')
bd_sinistro['CLASSIFICACAO_HBIT'] = bd_sinistro['CLASSIFICACAO_HBIT'].replace('consulta_pronto_socorro', 'consulta_PS')

bd_sinistro.head(10)

"""# 5 - Exportar bases de dados ajustadas com codificação UTF-8"""

# Define o caminho completo para salvar o arquivo
caminho_arquivo_PC = '/content/drive/MyDrive/Banco de dados/Ajustado/Cadastro_base_ajustado.csv'
caminho_arquivo_SN = '/content/drive/MyDrive/Banco de dados/Ajustado/Sinistros_base_ajustado.csv'

# Salva o DataFrame como CSV (ex: separador ; e encoding compatível com Excel)
bd_cadastro.to_csv(caminho_arquivo_PC, sep=';',date_format='%d/%m/%Y', index=False, encoding='utf-8')
bd_sinistro.to_csv(caminho_arquivo_SN, sep=';', date_format='%d/%m/%Y', index=False, encoding='utf-8')

print(f'Arquivos salvos no drive')